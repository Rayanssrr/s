W5kcm9pZCAoMjEvNS4wLjI7IDI0MGRwaTsgNTQweDk2MDsgc2Ftc3VuZzsgU00tRzUzMEg7IGZvcnR1bmEzZzsgcWNvbTsgYXJfQUU7IDE1NDQwMDM3OSkiLAogICAgICAgICAgICAiSW5zdGFncmFtIDEzNS4wLjAuMzQuMTI0IEFuZHJvaWQgKDI4Lzk7IDM4MGRwaTsgMTA4MHgyMTQ3OyBPbmVQbHVzOyBIV0VWQTsgT25lUGx1czZUOyBxY29tOyBlbl9VUzsgMTQ2NTM2NjExKSIsIF0KICAgICAgICBzZWxmLmJhZCA9IFsic2lnbnVwX2Jsb2NrIiwiZmV3IG1pbnV0ZXMiLCJmZWVkYmFja19yZXF1aXJlZCIsIF0KICAgICAgICBzZWxmLlNVQ0NFU1NfcmVzcG9uc2VzID0gWyJjaGFsbGVuZ2VfcmVxdWlyZWQiLCAiY2hhbGxlbmdlIiwgImVtYWlsX2lzX3Rha2VuLCB1c2VybmFtZV9pc190YWtlbiIsXQogICAgICAgIHNlbGYubG9ja3MgPSB0aHJlYWRpbmcuTG9jaygpCiAgICAgICAgc2VsZi5mYWwgPSBGYWxzZQogICAgICAgIHNlbGYubmFtZSA9IHN0cigiRGFkeSBSYXlhbiBpcyBIYXJlIikKICAgICAgICBzZWxmLnVpZCA9MAogICAgICAgIHNlbGYuRXIgPSAwCiAgICAgICAgc2VsZi5ScyA9IDAKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYudGFyZ2V0ID0gb3BlbigibGlzdC50eHQiLCAiciIpLnJlYWQoKS5zcGxpdGxpbmVzKCkKICAgICAgICAgICAgc2VsZi5QUk9YSUVTID0gb3BlbigicHJveGllcy50eHQiLCAiciIpLnJlYWQoKS5zcGxpdGxpbmVzKCkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGUpCiAgICAgICAgc2VsZi5hcGlfbGlzdCA9IFsnaHR0cHM6Ly9iLmkuaW5zdGFncmFtLmNvbS9hcGkvdjEvYWNjb3VudHMvY3JlYXRlX2J1c2luZXNzLyddCiAgICAgICAgc2VsZi5ydW4gPSBUcnVlCiAgICAgICAgc2VsZi5jb250cm9sbCA9IHRocmVhZGluZy5FdmVudCgpCiAgICAgICAgaWYgc2VsZi50aHJlYWRzIDw9IDI1MDoKICAgICAgICAgICAgc2VsZi5mdXR1cmVfc2Vzc2lvbiA9IEZ1dHVyZXNTZXNzaW9uKG1heF93b3JrZXJzPXNlbGYudGhyZWFkcyAqIDIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5mdXR1cmVfc2Vzc2lvbiA9IEZ1dHVyZXNTZXNzaW9uKG1heF93b3JrZXJzPXNlbGYudGhyZWFkcykKICAgICAgICBmb3IgaSBpbiByYW5nZShpbnQoc2VsZi50aHJlYWRzKSk6CiAgICAgICAgICAgIHQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1zZWxmLkF0dGFjaykKICAgICAgICAgICAgc2VsZi5jb250cm9sbC5zZXQoKQogICAgICAgICAgICB0LnN0YXJ0KCkKICAgICAgICBzZWxmLmZ1YyA9IFtzZWxmLkF0dGFjaygpXQoKCgogICAgZGVmIHByb3hpZXMoc2VsZik6CiAgICAgICAgc2VsZi5wcm94eSA9IHN0cihyYW5kb20uY2hvaWNlKHNlbGYuUFJPWElFUykpCiAgICAgICAgc2VsZi5SZXByb3h5ID0geydodHRwJzogZid7c2VsZi5wcm94eX0nLCdodHRwcyc6IGYne3NlbGYucHJveHl9J30KICAgICAgICByZXR1cm4gc2VsZi5SZXByb3h5CgoKCiAgICBkZWYgYmVfZm9yX0F0dGFjayhzZWxmKToKICAgICAgICB3aGlsZSBzZWxmLnJ1bjoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5jb250cm9sbC53YWl0KCkKICAgICAgICAgICAgICAgIHVpZCA9IHN0cih1dWlkLnV1aWQxKCkpCiAgICAgICAgICAgICAgICBzc3MgPSByYW5kb20uY2hvaWNlKHNlbGYudXMpCiAgICAgICAgICAgICAgICBoZWFkID0gewogICAgICAgICAgICAgICAgICAgICdYLUlHLUNvbm5lY3Rpb24tVHlwZSc6ICdXSUZJJywKICAgICAgICAgICAgICAgICAgICAnWC1JRy1DYXBhYmlsaXRpZXMnOiAnM2JyVEJ3PT0nLAogICAgICAgICAgICAgICAgICAgICdBY2NlcHQtRW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZScsCiAgICAgICAgICAgICAgICAgICAgJ0hvc3QnOiAnaS5pbnN0YWdyYW0uY29tJywKICAgICAgICAgICAgICAgICAgICAnQWNjZXB0JzogJyovKicsCiAgICAgICAgICAgICAgICAgICAgIlgtSWctQ29ubmVjdGlvbi1UeXBlIjogIldpRmkiLAogICAgICAgICAgICAgICAgICAgICJJZy1VLUlnLURpcmVjdC1SZWdpb24tSGludCI6ICJBU0giLAogICAgICAgICAgICAgICAgICAgICJVc2VyLUFnZW50Ijogc3NzLAogICAgICAgICAgICAgICAgICAgICJYLUlnLUFwcC1TdGFydHVwLUNvdW50cnkiOiAiU0EiLAogICAgICAgICAgICAgICAgICAgICJYLU1pZCI6ICJZQV9KV1FBQUFBSDctZC04d3h6OC1TQldrS2Q1byIsCiAgICAgICAgICAgICAgICAgICAgIlgtQmxva3MtVmVyc2lvbi1JZCI6ICJmZTkzNjU3MDAtY2FhNzNkNGU5MTMtMjNmMzNlNDA0MzVjYmNiZTYyNjIyZjY2OWY4NmE3ZjUyMzg5M2YzNWQzNjUiLAogICAgICAgICAgICAgICAgICAgICJYLUJsb2tzLU1pbmlmeS1QYXlsb2FkLUNhY2hlLUtleSI6ICJkZWZhdWx0IiwKICAgICAgICAgICAgICAgICAgICAiWC1QaWdlb24tUmF3Y2xpZW50dGltZSI6ICIxNjIxMTY0MTE3LjM3NjU5IiwKICAgICAgICAgICAgICAgICAgICAiSWctVS1SdXIiOiAiRlJDIiwKICAgICAgICAgICAgICAgICAgICAiWC1QaWdlb24tU2Vzc2lvbi1JZCI6IHVpZCwKICAgICAgICAgICAgICAgICAgICAiWC1JZy1BcHAtSWQiOiAiMTI0MDItNDU3NDI4NzQxNCIsCiAgICAgICAgICAgICAgICAgICAgIlgtRmItSHR0cC1FbmdpbmUiOiAiTGlnZXIiLAogICAgICAgICAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiZW4tVVM7cT0xLjAiLAogICAgICAgICAgICAgICAgICAgICMgIlggLSBGYiAtIEh0dHAgLSBFbmdpbmUiOiAiTGlnZXIiLAogICAgICAgICAgICAgICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IiwKICAgICAgICAgICAgICAgICAgICAiQ29ubmVjdGlvbiI6ICJjbG9zZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVtYWlsID0gbGFtYmRhIGxlbjogJycuam9pbihjaG9pY2VzKGxpc3QoYXNjaWlfbG93ZXJjYXNlICsgZGlnaXRzKSwgaz1sZW4pKQogICAgICAgICAgICAgICAgc2VsZi5kcyA9IGxhbWJkYSBsZW46ICcnLmpvaW4oY2hvaWNlcyhsaXN0KGFzY2lpX2xvd2VyY2FzZSkpKQogICAgICAgICAgICAgICAgc2VsZi5kc191c2VyID0gc2VsZi5kcygxMSkgKyAiLS0iICsgc2VsZi5kcyg1KQogICAgICAgICAgICAgICAgcmFuZG9tX2VtID0gZW1haWwoMjApICsgIkBnbWFpbC5jb20iCiAgICAgICAgICAgICAgICByYW5kb21fcCA9IGVtYWlsKDIwKQogICAgICAgICAgICAgICAgc2VsZi51c2VyID0gcmFuZG9tLmNob2ljZShzZWxmLnRhcmdldCkKICAgICAgICAgICAgICAgIGZ1dHVyZXMgPSBbc2VsZi5mdXR1cmVfc2Vzc2lvbi5wb3N0KHVybF90d28sIHByb3hpZXM9c2VsZi5wcm94aWVzKCksIHRpbWVvdXQ9c2VsZi5UaW1lb3V0LCBkYXRhPXsnZW1haWwnOiByYW5kb21fZW0sCiAgICAgICAgICAgICAgICAgICAgJ3Bhc3N3b3JkJzogcmFuZG9tX3AsCiAgICAgICAgICAgICAgICAgICAgJ3VzZXJuYW1lJzogc2VsZi51c2VyLAogICAgICAgICAgICAgICAgICAgICdmaXJzdF9uYW1lJzogc2VsZi5uYW1lLAogICAgICAgICAgICAgICAgICAgICdkZXZpY2VfaWQnOiBzdHIodXVpZC51dWlkNCgpKSwKICAgICAgICAgICAgICAgICAgICAicGhvbmVfaWQiOiBzdHIodXVpZC51dWlkNCgpKX0sIGNvb2tpZXM9eyJjc3JmdG9rZW4iOiAibWlzc2luZyIsIm1pZCI6Im1pc3NpbmciLCAiZHNfdXNlcl9pZCI6IGYie3NlbGYuZHNfdXNlcn0iLCJydXIiOiJGUkMiLCJJZy1VLUlnLURpcmVjdC1SZWdpb24tSGludCI6ICJBU0gifSxoZWFkZXJzPWhlYWQpIGZvciBpIGluIHJhbmdlKHNlbGYuTG9vcHMpXQogICAgICAgICAgICAgICAgZm9yIGZ1dHVyZSBpbiBhc19jb21wbGV0ZWQoZnV0dXJlcyk6CiAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGZ1dHVyZS5yZXN1bHQoKQogICAgICAgICAgICAgICAgICAgICNwcmludChzZWxmLnVzZXIpCiAgICAgICAgICAgICAgICAgICAgI3ByaW50KHJlc3AudGV4dCkKICAgICAgICAgICAgICAgICAgICBpZiAiaXNuJ3QiIGluIHJlc3AudGV4dDoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hdHRlbXAgKz0xCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggc2VsZi5sb2NrczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHIgIEF0dGVtcHQgOiB7c2VsZi5hdHRlbXB9IC8gRXJyb3IgOiB7c2VsZi5Fcn0iLCBlbmQ9IiIpCiAgICAgICAgICAgICAgICAgICAgaWYgYW55KGkgaW4gcmVzcC50ZXh0IGZvciBpIGluIHNlbGYuU1VDQ0VTU19yZXNwb25zZXMgb3IgImVtYWlsX2lzX3Rha2VuLCB1c2VybmFtZV9pc190YWtlbiIpOgogICAgICAgICAgICAgICAgICAgICAgICB3aXRoIG9wZW4oZidAe3NlbGYudXNlcn0udHh0JywgJ2EnKSBhcyBmaWxlMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUzLndyaXRlKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdVc2VybmFtZTonICsgc2VsZi51c2VyICsgJ1xuJyArICdFbWFpbDonICsgcmFuZG9tX2VtICsgJ1xuJyArICdwYXNzd29yZDonICsgcmFuZG9tX3AgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHNlbGYudXNlcikgPCA1MDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJob29rID0gRGlzY29yZFdlYmhvb2soCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybD0naHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvODM3MzY4Njg3NjA1NzEwODQ5L0t1Y3NNdkRjOWtKOVBnSnJ0U09LWldIYXZPeTd1TjU2dV9LZ19pd1pVMWJaQy1pdXQ3OHRTV0laMHQ2Ymt3OFprWUxYJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWJlZCA9IERpc2NvcmRFbWJlZCh0aXRsZT0nI1JlZyAnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPSdAe31cbiBBdHRlbXB0ID4+IHt9Jy5mb3JtYXQoc2VsZi51c2VyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hdHRlbXApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPTkxMDk1MDQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1iZWQuc2V0X2Zvb3Rlcih0ZXh0PSIjUmF5YW58IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWJlZC5zZXRfdGltZXN0YW1wKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJob29rLmFkZF9lbWJlZChlbWJlZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IHdlYmhvb2suZXhlY3V0ZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHNlbGYubG9ja3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcciAgTmV3IGNsaWFtZWQgPiBAe3NlbGYudXNlcn0iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R5cGVzLndpbmRsbC51c2VyMzIuTWVzc2FnZUJveFcoMCwgZiJjbGFpbWVkIHN1Y2Nlc3NmdWxseToge3NlbGYudXNlcn0gIiwgIlJlZyIsIDB4MTAwMCkKICAgICAgICAgICAgICAgICAgICBpZiBhbnkoaSBpbiByZXNwLnRleHQgZm9yIGkgaW4gc2VsZi5iYWQpOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLkVyICs9MQogICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHNlbGYubG9ja3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIlxyICBBdHRlbXB0IDoge3NlbGYuYXR0ZW1wfSAvIEVycm9yIDoge3NlbGYuRXJ9IiwgZW5kPSIiKQogICAgICAgICAgICAgICAgICAgIHJlcSA9IHJlcXVlc3RzLnBvc3QodXJsX3R3bywgcHJveGllcz1zZWxmLnByb3hpZXMoKSwgdGltZW91dD1zZWxmLlRpbWVvdXQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhPXsnZW1haWwnOiByYW5kb21fZW0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFzc3dvcmQnOiByYW5kb21fcCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1c2VybmFtZSc6IHNlbGYudXNlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmaXJzdF9uYW1lJzogc2VsZi5uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RldmljZV9pZCc6IHN0cih1dWlkLnV1aWQ0KCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBob25lX2lkIjogc3RyKHV1aWQudXVpZDQoKSl9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2llcz17ImNzcmZ0b2tlbiI6ICJtaXNzaW5nIiwgIm1pZCI6ICJtaXNzaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkc191c2VyX2lkIjogZiJ7c2VsZi5kc191c2VyfSIsICJydXIiOiAiRlJDIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJJZy1VLUlnLURpcmVjdC1SZWdpb24tSGludCI6ICJBU0gifSwgaGVhZGVycz1oZWFkKS50ZXh0CgogICAgICAgICAgICAgICAgICAgIGlmIGFueShpIGluIHJlcSBmb3IgaSBpbiBzZWxmLlNVQ0NFU1NfcmVzcG9uc2VzIG9yICJlbWFpbF9pc190YWtlbiwgdXNlcm5hbWVfaXNfdGFrZW4iKToKICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBvcGVuKGYnQHtzZWxmLnVzZXJ9LnR4dCcsICdhJykgYXMgZmlsZTM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlMy53cml0ZSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVXNlcm5hbWU6JyArIHNlbGYudXNlciArICdcbicgKyAnRW1haWw6JyArIHJhbmRvbV9lbSArICdcbicgKyAncGFzc3dvcmQ6JyArIHJhbmRvbV9wICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbihzZWxmLnVzZXIpIDwgNTA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViaG9vayA9IERpc2NvcmRXZWJob29rKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw9J2h0dHBzOi8vZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzgzNzM2ODY4NzYwNTcxMDg0OS9LdWNzTXZEYzlrSjlQZ0pydFNPS1pXSGF2T3k3dU41NnVfS2dfaXdaVTFiWkMtaXV0Nzh0U1dJWjB0NmJrdzhaa1lMWCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1iZWQgPSBEaXNjb3JkRW1iZWQodGl0bGU9JyNSZWcgJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbj0nQHt9XG4gQXR0ZW1wdCA+PiB7fScuZm9ybWF0KHNlbGYudXNlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXR0ZW1wKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj05MTA5NTA0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYmVkLnNldF9mb290ZXIodGV4dD0iI1JheWFufCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1iZWQuc2V0X3RpbWVzdGFtcCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViaG9vay5hZGRfZW1iZWQoZW1iZWQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB3ZWJob29rLmV4ZWN1dGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBzZWxmLmxvY2tzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHIgIE5ldyBjbGlhbWVkID4gQHtzZWxmLnVzZXJ9IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eXBlcy53aW5kbGwudXNlcjMyLk1lc3NhZ2VCb3hXKDAsIGYiY2xhaW1lZCBzdWNjZXNzZnVsbHk6IHtzZWxmLnVzZXJ9ICIsICJSZWciLCAweDEwMDApCiAgICAgICAgICAgICAgICAgICAgaWYgYW55KGkgaW4gcmVxIGZvciBpIGluIHNlbGYuYmFkKToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5FciArPSAxCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggc2VsZi5sb2NrczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHIgIEF0dGVtcHQgOiB7c2VsZi5hdHRlbXB9IC8gRXJyb3IgOiB7c2VsZi5Fcn0iLCBlbmQ9IiIpCgoKCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgYToKICAgICAgICAgICAgICAgICNwcmludChhKQogICAgICAgICAgICAgICAgcGFzcwoKICAgIGRlZiBBdHRhY2soc2VsZik6CiAgICAgICAgd2hpbGUgc2VsZi5ydW46CiAgICAgICAgICAgIHNlbGYuYmVfZm9yX0F0dGFjaygpCmNsYXNzIFRhcmdldF9hdHRhY2soKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLHRyZCxUaW1lb3V0KToKICAgICAgICBzZWxmLmF0dGVtcCA9IDAKICAgICAgICBzZWxmLnRocmVhZHMgPSB0cmQKICAgICAgICBzZWxmLnVzID0gWwogICAgICAgICAgICAgICAgICAgICJJbnN0YWdyYW0gMTM1LjAuMC4zNC4xMjQgQW5kcm9pZCAoMjEvNS4wLjI7IDI0MGRwaTsgNTQweDk2MDsgc2Ftc3VuZzsgU00tRzUzMEg7IGZvcnR1bmEzZzsgcWNvbTsgYXJfQUU7IDE1NDQwMDM3OSkiLAogICAgICAgICAgICAgICAgICAgICJJbnN0YWdyYW0gMTM1LjAuMC4zNC4xMjQgQW5kcm9pZCAoMjQvNS4wOyA1MTVkcGk7IDE0NDB4MjQxNjsgaHVhd2VpL2dvb2dsZTsgTmV4dXMgNlA7IGFuZ2xlcjsgYW5nbGVyOyBlbl9VUykiLAogICAgICAgICAgICAgICAgICAgICJJbnN0YWdyYW0gMTM1LjAuMC4zNC4xMjQgQW5kcm9pZCAoMjEvNS4wLjI7IDI0MGRwaTsgNTQweDk2MDsgc2Ftc3VuZzsgU00tRzUzMEg7IGZvcnR1bmEzZzsgcWNvbTsgYXJfQUU7IDE1NDQwMDM3OSkiLAogICAgICAgICAgICAgICAgICAgICJJbnN0YWdyYW0gMTM1LjAuMC4zNC4xMjQgQW5kcm9pZCAoMjgvOTsgMzgwZHBpOyAxMDgweDIxNDc7IE9uZVBsdXM7IEhXRVZBOyBPbmVQbHVzNlQ7IHFjb207IGVuX1VTOyAxNDY1MzY2MTEpIiwKICAgICAgICBdCiAgICAgICAgc2VsZi5UaW1lb3V0ID0gVGltZW91dAogICAgICAgIHNlbGYubmFtZSA9IHN0cigiRGFkeSBSYXlhbiBpcyBIYXJlIikKICAgICAgICBzZWxmLmJhZCA9IFsic2lnbnVwX2Jsb2NrIiwiZmV3IG1pbnV0ZXMiLCJmZWVkYmFja19yZXF1aXJlZCIsImdlbmVyaWNfcmVxdWVzdF9lcnJvciIgXQogICAgICAgIHNlbGYuU1VDQ0VTU19yZXNwb25zZXMgPSBbImNoYWxsZW5nZV9yZXF1aXJlZCIsICJjaGFsbGVuZ2UiLCAiZW1haWxfaXNfdGFrZW4sIHVzZXJuYW1lX2lzX3Rha2VuIixdCiAgICAgICAgc2VsZi5kcyA9IHN0cmluZy5hc2NpaV9sb3dlcmNhc2UKICAgICAgICBzZWxmLnVzZXIgPSBpbnB1dCgiVGFyZ2V0IDogIikKICAgICAgICBzZWxmLmxvY2tzID0gdGhyZWFkaW5nLkxvY2soKQogICAgICAgIHNlbGYuRXIgPSAwCiAgICAgICAgc2VsZi5QUk9YSUVTID0gb3BlbigicHJveGllcy50eHQiLCAiciIpLnJlYWQoKS5zcGxpdGxpbmVzKCkKICAgICAgICBzZWxmLmFwaV9saXN0ID0gWydodHRwczovL2IuaW5zdGFncmFtLmNvbS9hcGkvdjEvYWNjb3VudHMvY3JlYXRlX2J1c2luZXNzLyddCiAgICAgICAgc2VsZi5ydW4gPSBUcnVlCiAgICAgICAgc2VsZi5jb250cm9sbCA9IHRocmVhZGluZy5FdmVudCgpCiAgICAgICAgaWYgc2VsZi50aHJlYWRzIDw9IDI1MDoKICAgICAgICAgICAgc2VsZi5mdXR1cmVfc2Vzc2lvbiA9IEZ1dHVyZXNTZXNzaW9uKG1heF93b3JrZXJzPXNlbGYudGhyZWFkcykKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLmZ1dHVyZV9zZXNzaW9uID0gRnV0dXJlc1Nlc3Npb24obWF4X3dvcmtlcnM9c2VsZi50aHJlYWRzKQogICAgICAgIHNlbGYudGhyZWRhcyA9IFtdCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoaW50KHNlbGYudGhyZWFkcyBvciAzMCkpOgogICAgICAgICAgICB0ID0gdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9c2VsZi5BdHRhY2spCiAgICAgICAgICAgIHQuc2V0RGFlbW9uID0gVHJ1ZQogICAgICAgICAgICB0LnN0YXJ0KCkKICAgICAgICAgICAgc2VsZi5jb250cm9sbC5zZXQoKQogICAgICAgICAgICBzZWxmLnRocmVkYXMuYXBwZW5kKHQpCiAgICAgICAgc2VsZi5mdWMgPSBbc2VsZi5BdHRhY2soKV0KCgoKCiAgICBkZWYgcHJveGllcyhzZWxmKToKICAgICAgICBzZWxmLnByb3h5ID0gc3RyKHJhbmRvbS5jaG9pY2Uoc2VsZi5QUk9YSUVTKSkKICAgICAgICBzZWxmLlJlcHJveHkgPSB7J2h0dHAnOiBmJ3tzZWxmLnByb3h5fScsJ2h0dHBzJzogZid7c2VsZi5wcm94eX0nfQogICAgICAgIHJldHVybiBzZWxmLlJlcHJveHkKCiAgICBkZWYgc2VuZF9kaXNjb3JkX3dlYmhvb2soc2VsZik6CiAgICAgICAgd2ViaG9vayA9IERpc2NvcmRXZWJob29rKHVybD0naHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvODM3MzY4Njg3NjA1NzEwODQ5L0t1Y3NNdkRjOWtKOVBnSnJ0U09LWldIYXZPeTd1TjU2dV9LZ19pd1pVMWJaQy1pdXQ3OHRTV0laMHQ2Ymt3OFprWUxYJykKICAgICAgICBlbWJlZCA9IERpc2NvcmRFbWJlZCh0aXRsZT0nI1JlZyAnLCBkZXNjcmlwdGlvbj0nQHt9XG4gQXR0ZW1wdCA+PiB7fScuZm9ybWF0KHNlbGYudXNlciwgc2VsZi5hdHRlbXApLCBjb2xvcj05MTA5NTA0KQogICAgICAgIGVtYmVkLnNldF9mb290ZXIodGV4dD0iI1JheWFufCIpCiAgICAgICAgZW1iZWQuc2V0X3RpbWVzdGFtcCgpCiAgICAgICAgd2ViaG9vay5hZGRfZW1iZWQoZW1iZWQpCiAgICAgICAgcmVzcG9uc2UgPSB3ZWJob29rLmV4ZWN1dGUoKQoKCiAgICBkZWYgYmVfZm9yX0F0dGFjayhzZWxmKToKICAgICAgICBzZWxmLmNvbnRyb2xsLndhaXQoKQogICAgICAgIHVpZCA9IHN0cih1dWlkLnV1aWQxKCkpCiAgICAgICAgc3NzID0gcmFuZG9tLmNob2ljZShzZWxmLnVzKQogICAgICAgIGhlYWQgPSB7CiAgICAgICAgICAgICdYLUlHLUNvbm5lY3Rpb24tVHlwZSc6ICdXSUZJJywKICAgICAgICAgICAgJ1gtSUctQ2FwYWJpbGl0aWVzJzogJzNiclRCdz09JywKICAgICAgICAgICAgJ0FjY2VwdC1FbmNvZGluZyc6ICdnemlwLCBkZWZsYXRlJywKICAgICAgICAgICAgJ0hvc3QnOiAnaS5pbnN0YWdyYW0uY29tJywKICAgICAgICAgICAgJ0FjY2VwdCc6ICcqLyonLAogICAgICAgICAgICAiWC1JZy1Db25uZWN0aW9uLVR5cGUiOiAiV2lGaSIsCiAgICAgICAgICAgICJJZy1VLUlnLURpcmVjdC1SZWdpb24tSGludCI6ICJBU0giLAogICAgICAgICAgICAiVXNlci1BZ2VudCI6IHNzcywKICAgICAgICAgICAgIlgtSWctQXBwLVN0YXJ0dXAtQ291bnRyeSI6ICJTQSIsCiAgICAgICAgICAgICJYLU1pZCI6ICJZQV9KV1FBQUFBSDctZC04d3h6OC1TQldrS2Q1byIsCiAgICAgICAgICAgICJYLUJsb2tzLVZlcnNpb24tSWQiOiAiZmU5MzY1NzAwLWNhYTczZDRlOTEzLTIzZjMzZTQwNDM1Y2JjYmU2MjYyMmY2NjlmODZhN2Y1MjM4OTNmMzVkMzY1IiwKICAgICAgICAgICAgIlgtQmxva3MtTWluaWZ5LVBheWxvYWQtQ2FjaGUtS2V5IjogImRlZmF1bHQiLAogICAgICAgICAgICAiWC1QaWdlb24tUmF3Y2xpZW50dGltZSI6ICIxNjIxMTY0MTE3LjM3NjU5IiwKICAgICAgICAgICAgIklnLVUtUnVyIjogIkZSQyIsCiAgICAgICAgICAgICJYLVBpZ2Vvbi1TZXNzaW9uLUlkIjogdWlkLAogICAgICAgICAgICAiWC1JZy1BcHAtSWQiOiAiMTI0MDItNDU3NDI4NzQxNCIsCiAgICAgICAgICAgICJYLUZiLUh0dHAtRW5naW5lIjogIkxpZ2VyIiwKICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJlbi1VUztxPTEuMCIsCiAgICAgICAgICAgICMgIlggLSBGYiAtIEh0dHAgLSBFbmdpbmUiOiAiTGlnZXIiLAogICAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCIsCiAgICAgICAgICAgICJDb25uZWN0aW9uIjogImNsb3NlIgogICAgICAgIH0KICAgICAgICBlbWFpbCA9IGxhbWJkYSBsZW46ICcnLmpvaW4oY2hvaWNlcyhsaXN0KGFzY2lpX2xvd2VyY2FzZSArIGRpZ2l0cyksIGs9bGVuKSkKICAgICAgICBzZWxmLmRzID0gbGFtYmRhIGxlbjonJy5qb2luKGNob2ljZXMobGlzdChhc2NpaV9sb3dlcmNhc2UpKSkKICAgICAgICBzZWxmLmRzX3VzZXIgPSBzZWxmLmRzKDExKSArICItLSIgKyBzZWxmLmRzKDUpCiAgICAgICAgcmFuZG9tX2VtID0gZW1haWwoMjApICsgIkBnbWFpbC5jb20iCiAgICAgICAgcmFuZG9tX3AgPSBlbWFpbCgyMCkKICAgICAgICAjcHJpbnQoc2VsZi51c2VyKQogICAgICAgIGZ1dHVyZXMgPSBbc2VsZi5mdXR1cmVfc2Vzc2lvbi5wb3N0KHVybF90d28sIHByb3hpZXM9c2VsZi5wcm94aWVzKCksIHRpbWVvdXQ9c2VsZi5UaW1lb3V0LCBkYXRhPQogICAgICAgICAgICB7J2VtYWlsJzogcmFuZG9tX2VtLAogICAgICAgICAgICAncGFzc3dvcmQnOiByYW5kb21fcCwKICAgICAgICAgICAgJ3VzZXJuYW1lJzogc2VsZi51c2VyLAogICAgICAgICAgICAnZmlyc3RfbmFtZSc6IHNlbGYubmFtZSwKICAgICAgICAgICAgJ2RldmljZV9pZCc6ICI0MkQ4NkJFMy1CODE4LTRFOTItQTYxRC1EOUM3N0IzQThGNDgiLAogICAgICAgICAgICAicGhvbmVfaWQiOiAiNDJEODZCRTMtQjgxOC00RTkyLUE2MUQtRDlDNzdCM0E4RjQ4IiwKICAgICAgICAgICAgJ2RheSc6ICczMScsCiAgICAgICAgICAgICdtb250aCc6ICc1JywKICAgICAgICAgICAgJ3llYXInOiAnMjAwMicsCiAgICAgICAgICAgICdjbGllbnRfaWQnOiAiNDJEODZCRTMtQjgxOC00RTkyLUE2MUQtRDlDNzdCM0E4RjQ4IiwKICAgICAgICAgICAgJ3NlYW1sZXNzX2xvZ2luX2VuYWJsZWQnOiAxLAogICAgICAgICAgICAndG9zX3ZlcnNpb24nOiAncm93JywKICAgICAgICAgICAgIH0sIGNvb2tpZXM9eyJjc3JmdG9rZW4iOiAibWlzc2luZyIsIm1pZCI6Im1pc3NpbmciLCAiZHNfdXNlcl9pZCI6IGYie3NlbGYuZHNfdXNlcn0iLCJydXIiOiJGUkMiLCJJZy1VLUlnLURpcmVjdC1SZWdpb24tSGludCI6ICJBU0gifSxoZWFkZXJzPWhlYWQpIGZvciBpIGluIHJhbmdlKDUwMDApXQogICAgICAgIGZvciBmdXR1cmUgaW4gYXNfY29tcGxldGVkKGZ1dHVyZXMpOgogICAgICAgICAgICByZXNwID0gZnV0dXJlLnJlc3VsdCgpCiAgICAgICAgICAgICNwcmludChmIntyZXNwLnN0YXR1c19jb2RlfSIpCiAgICAgICAgICAgIGlmICJpc24ndCIgaW4gcmVzcC50ZXh0OgogICAgICAgICAgICAgICAgc2VsZi5hdHRlbXAgKz0gMQogICAgICAgICAgICAgICAgd2l0aCBzZWxmLmxvY2tzOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHIgIEF0dGVtcHQgOiB7c2VsZi5hdHRlbXB9IC8gRXJyb3IgOiB7c2VsZi5Fcn0iLCBlbmQ9IiIpCiAgICAgICAgICAgIGlmIGFueShpIGluIHJlc3AudGV4dCBmb3IgaSBpbiBzZWxmLlNVQ0NFU1NfcmVzcG9uc2VzIG9yICJlbWFpbF9pc190YWtlbiwgdXNlcm5hbWVfaXNfdGFrZW4iKToKICAgICAgICAgICAgICAgIHdpdGggb3BlbihmJ0B7c2VsZi51c2VyfS50eHQnLCAnYScpIGFzIGZpbGUzOgogICAgICAgICAgICAgICAgICAgIGZpbGUzLndyaXRlKAogICAgICAgICAgICAgICAgICAgICAgICAnVXNlcm5hbWU6JyArIHNlbGYudXNlciArICdcbicgKyAnRW1haWw6JyArIHJhbmRvbV9lbSArICdcbicgKyAncGFzc3dvcmQ6JyArIHJhbmRvbV9wICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICBpZiBsZW4oc2VsZi51c2VyKSA8IDUwOgogICAgICAgICAgICAgICAgICAgICAgICB3ZWJob29rID0gRGlzY29yZFdlYmhvb2soCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw9J2h0dHBzOi8vZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzgzNzM2ODY4NzYwNTcxMDg0OS9LdWNzTXZEYzlrSjlQZ0pydFNPS1pXSGF2T3k3dU41NnVfS2dfaXdaVTFiWkMtaXV0Nzh0U1dJWjB0NmJrdzhaa1lMWCcpCiAgICAgICAgICAgICAgICAgICAgICAgIGVtYmVkID0gRGlzY29yZEVtYmVkKHRpdGxlPScjUmVnICcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPSdAe31cbiBBdHRlbXB0ID4+IHt9Jy5mb3JtYXQoc2VsZi51c2VyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXR0ZW1wKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9OTEwOTUwNCkKICAgICAgICAgICAgICAgICAgICAgICAgZW1iZWQuc2V0X2Zvb3Rlcih0ZXh0PSIjUmF5YW58IikKICAgICAgICAgICAgICAgICAgICAgICAgZW1iZWQuc2V0X3RpbWVzdGFtcCgpCiAgICAgICAgICAgICAgICAgICAgICAgIHdlYmhvb2suYWRkX2VtYmVkKGVtYmVkKQogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IHdlYmhvb2suZXhlY3V0ZSgpCiAgICAgICAgICAgICAgICAgICAgd2l0aCBzZWxmLmxvY2tzOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIlxyICBOZXcgY2xpYW1lZCA+IEB7c2VsZi51c2VyfSIpCiAgICAgICAgICAgICAgICAgICAgY3R5cGVzLndpbmRsbC51c2VyMzIuTWVzc2FnZUJveFcoMCwgZiJjbGFpbWVkIHN1Y2Nlc3NmdWxseToge3NlbGYudXNlcn0gIiwgIlJlZyIsIDB4MTAwMCkKICAgICAgICAgICAgaWYgYW55KGkgaW4gcmVzcC50ZXh0IGZvciBpIGluIHNlbGYuYmFkKToKICAgICAgICAgICAgICAgIHNlbGYuRXIgKz0gMQogICAgICAgICAgICAgICAgd2l0aCBzZWxmLmxvY2tzOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHIgIEF0dGVtcHQgOiB7c2VsZi5hdHRlbXB9IC8gRXJyb3IgOiB7c2VsZi5Fcn0iLCBlbmQ9IiIpCiAgICAgICAgICAgIHJlcSA9IHJlcXVlc3RzLnBvc3QodXJsX3R3bywgcHJveGllcz1zZWxmLnByb3hpZXMoKSwgdGltZW91dD1zZWxmLlRpbWVvdXQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YT17J2VtYWlsJzogcmFuZG9tX2VtLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwYXNzd29yZCc6IHJhbmRvbV9wLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1c2VybmFtZSc6IHNlbGYudXNlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmlyc3RfbmFtZSc6IHNlbGYubmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGV2aWNlX2lkJzogc3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBob25lX2lkIjogc3RyKHV1aWQudXVpZDQoKSl9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZXM9eyJjc3JmdG9rZW4iOiAibWlzc2luZyIsICJtaWQiOiAibWlzc2luZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRzX3VzZXJfaWQiOiBmIntzZWxmLmRzX3VzZXJ9IiwgInJ1ciI6ICJGUkMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJJZy1VLUlnLURpcmVjdC1SZWdpb24tSGludCI6ICJBU0gifSwgaGVhZGVycz1oZWFkKS50ZXh0CgogICAgICAgICAgICBpZiBhbnkoaSBpbiByZXEgZm9yIGkgaW4gc2VsZi5TVUNDRVNTX3Jlc3BvbnNlcyBvciAiZW1haWxfaXNfdGFrZW4sIHVzZXJuYW1lX2lzX3Rha2VuIik6CiAgICAgICAgICAgICAgICB3aXRoIG9wZW4oZidAe3NlbGYudXNlcn0udHh0JywgJ2EnKSBhcyBmaWxlMzoKICAgICAgICAgICAgICAgICAgICBmaWxlMy53cml0ZSgKICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXJuYW1lOicgKyBzZWxmLnVzZXIgKyAnXG4nICsgJ0VtYWlsOicgKyByYW5kb21fZW0gKyAnXG4nICsgJ3Bhc3N3b3JkOicgKyByYW5kb21fcCArICdcbicpCiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHNlbGYudXNlcikgPCA1MDoKICAgICAgICAgICAgICAgICAgICAgICAgd2ViaG9vayA9IERpc2NvcmRXZWJob29rKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsPSdodHRwczovL2Rpc2NvcmQuY29tL2FwaS93ZWJob29rcy84MzczNjg2ODc2MDU3MTA4NDkvS3Vjc012RGM5a0o5UGdKcnRTT0taV0hhdk95N3VONTZ1X0tnX2l3WlUxYlpDLWl1dDc4dFNXSVowdDZia3c4WmtZTFgnKQogICAgICAgICAgICAgICAgICAgICAgICBlbWJlZCA9IERpc2NvcmRFbWJlZCh0aXRsZT0nI1JlZyAnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbj0nQHt9XG4gQXR0ZW1wdCA+PiB7fScuZm9ybWF0KHNlbGYudXNlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmF0dGVtcCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPTkxMDk1MDQpCiAgICAgICAgICAgICAgICAgICAgICAgIGVtYmVkLnNldF9mb290ZXIodGV4dD0iI1JheWFufCIpCiAgICAgICAgICAgICAgICAgICAgICAgIGVtYmVkLnNldF90aW1lc3RhbXAoKQogICAgICAgICAgICAgICAgICAgICAgICB3ZWJob29rLmFkZF9lbWJlZChlbWJlZCkKICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB3ZWJob29rLmV4ZWN1dGUoKQogICAgICAgICAgICAgICAgICAgIHdpdGggc2VsZi5sb2NrczoKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcciAgTmV3IGNsaWFtZWQgPiBAe3NlbGYudXNlcn0iKQogICAgICAgICAgICAgICAgICAgIGN0eXBlcy53aW5kbGwudXNlcjMyLk1lc3NhZ2VCb3hXKDAsIGYiY2xhaW1lZCBzdWNjZXNzZnVsbHk6IHtzZWxmLnVzZXJ9ICIsICJSZWciLCAweDEwMDApCiAgICAgICAgICAgIGlmIGFueShpIGluIHJlcSBmb3IgaSBpbiBzZWxmLmJhZCk6CiAgICAgICAgICAgICAgICBzZWxmLkVyICs9IDEKICAgICAgICAgICAgICAgIHdpdGggc2VsZi5sb2NrczoKICAgICAgICAgICAgICAgICAgICBwcmludChmIlxyICBBdHRlbXB0IDoge3NlbGYuYXR0ZW1wfSAvIEVycm9yIDoge3NlbGYuRXJ9IiwgZW5kPSIiKQoKICAgIGRlZiBBdHRhY2soc2VsZik6CiAgICAgICAgd2hpbGUgc2VsZi5ydW46CiAgICAgICAgICAgIHNlbGYuYmVfZm9yX0F0dGFjaygpCgoKZGVmIFJlZ19BdHRhY2syKCk6CiAgICBhc2sgPSBpbnQoaW5wdXQoIjEtbGlzdCAtIDItVGFyZ2V0IDogIikpCiAgICBpZiBhc2sgPT0gMToKICAgICAgICB0cmQgPSBpbnQoaW5wdXQoIlRocmVhZHMgOiAiKSkKICAgICAgICBUaW1lb3V0ID0gaW50KGlucHV0KCJUaW1lb3V0IDogIikpCiAgICAgICAgTG9vcHMgPSBpbnQoaW5wdXQoIkxvb3BzIDogIikpCiAgICAgICAgUmVnID0gUmVnX0F0dGFjayh0cmQsVGltZW91dCxMb29wcykKICAgIGVsaWYgYXNrID09IDI6CiAgICAgICAgdHJkID0gaW50KGlucHV0KCJUaHJlYWRzIDogIikpCiAgICAgICAgVGltZW91dCA9IGludChpbnB1dCgiVGltZW91dCA6ICIpKQogICAgICAgIFJlZyA9IFRhcmdldF9hdHRhY2sodHJkLCBUaW1lb3V0KQogICAgd2hpbGUgMToKICAgICAgICBSZWcoKQoKClJlZ19BdHRhY2syKCkKCgoKCgoKCgoKCgo=
