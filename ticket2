import requests,uuid,random,re,ctypes,json,urllib,hashlib,hmac,urllib.parse,base64,os,string,threading
from time import sleep
import time

timestamp = str(int(time.time()))

def RandomStringUpper(n = 10):
    letters = string.ascii_uppercase + '1234567890'
    return ''.join(random.choice(letters) for i in range(n))
def RandomString(n=10):
    letters = string.ascii_lowercase + '1234567890'
    return ''.join(random.choice(letters) for i in range(n))
def RandomStringUpper(n=10):
    letters = string.ascii_uppercase + '1234567890'
    return ''.join(random.choice(letters) for i in range(n))
def RandomStringChars(n=10):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(n))
def randomStringWithChar(stringLength=10):
    letters = string.ascii_lowercase + '1234567890'
    result = ''.join(random.choice(letters) for i in range(stringLength - 1))
    return RandomStringChars(1) + result

Banner = """                                                                
            ____________    __ -+-  ____________ 
            \_____     /   /_ \ |   \     _____/
             \_____    \____/  \____/    _____/
              \_____                    _____/
                \___________  ___________/
                          /____\ 

                        FALCON DIGITAL ORG 
                        
                            IG : [@31421 - @m1c1]
                            Login Helper
"""

print(f"\t{Banner}")
print("--"*40)



uu = '83f2000a-4b95-4811-bc8d-0f3539ef07cf'
IG_SIG_KEY = '4f8732eb9ba7d1c8e8897a75d6474d4eb3f5279137431b2aafb71fafe2abe178'
SIG_KEY_VERSION = '4'
REQ = requests.session()

instaAPI = "https://i.instagram.com/api/v1"
Set_username = f'{instaAPI}/accounts/set_username/'
Edit_profile = f'{instaAPI}/accounts/edit_profile/'
def writesomething(mark,text):
    print(f"\r[{mark}] {text} ",end='')   
def send_Request(endpoint,sessionid,data=None,timeout=None,proxies=None):
    headers = {}
    headers["Connection"] = "keep-alive"
    headers["Accept"] = "*/*"
    headers["Content-Type"] = "application/x-www-form-urlencoded; charset=UTF-8"
    headers["Cookie2"] = "$Version=1"
    headers["Accept-Language"] = "en-US"
    headers["User-Agent"] = "Instagram 166.0.0.32.120 Android (21/5.0.2; 240dpi; 540x960; samsung; SM-G530H; fortuna3g; qcom; ar_AE; 154400379)"
    REQ.headers.update(headers)
    while 1:
            if proxies != None:
                return REQ.post(endpoint, data=data, cookies={"sessionid": sessionid}, verify=True, proxies=proxies,timeout=timeout).text
            else:
                return REQ.post(endpoint, data=data, cookies={"sessionid": sessionid}).text

def edit_profile(number,target,email,sessionid):
    data = json.dumps({
        "external_url": "", "phone_number": f"{number}",
        "username": f"{target}", "first_name": "", "_uid": f"47641699268",
        "device_id": "android-d595db3f5c276071", "biography": f"",
        "_uuid": str(uuid), "email": f"{email}"
    })
    #data = json.dumps({"external_url": "", "phone_number": f"{number}", "username": f"{target}","first_name": "", "_uid": f"{str(uuid)}","device_id": f"{str(DeviceId)}", "biography": f"","_uuid": str(uuid), "email": f"{email}"})
    return send_Request(Edit_profile,sessionid=sessionid,data=generateSignature(data))

def set_username_without_proxy(target,sessionid):
    data = json.dumps({"username": target})
    return send_Request(Set_username, sessionid=sessionid, data=generateSignature(data))

def generateSignature(data):
        try:
            parsedData = urllib.parse.quote(data)
        except:
            data = json.dumps(data)
            parsedData = urllib.parse.quote(data)
        return ('ig_sig_key_version=' + SIG_KEY_VERSION + '&signed_body=' + hmac.new(IG_SIG_KEY.encode('utf-8'),data.encode('utf-8'),hashlib.sha256).hexdigest() + '.' + parsedData)

clearConsle = lambda: os.system('cls')

class sessting:
    def __init__(self):
        pass
    def headers_login(self):
        headers = {}
        headers['User-Agent'] = self.UserAgent
        headers['Host'] = 'i.instagram.com'
        headers['content-type'] = 'application/x-www-form-urlencoded; charset=UTF-8'
        headers['accept-encoding'] = 'gzip, deflate'
        headers['x-fb-http-engine'] = 'Liger'
        headers['Connection'] = 'close'
        return headers
    def generateUSER_AGENT(self):
        Devices_menu = ['HUAWEI', 'Xiaomi', 'samsung', 'OnePlus']
        DPIs = [
            '480', '320', '640', '515', '120', '160', '240', '800'
        ]
        randResolution = random.randrange(2, 9) * 180
        lowerResolution = randResolution - 180
        DEVICE_SETTINTS = {
            'system': "Android",
            'Host': "Instagram",
            'manufacturer': f'{random.choice(Devices_menu)}',
            'model': f'{random.choice(Devices_menu)}-{randomStringWithChar(4).upper()}',
            'android_version': random.randint(18, 25),
            'android_release': f'{random.randint(1, 7)}.{random.randint(0, 7)}',
            "cpu": f"{RandomStringChars(2)}{random.randrange(1000, 9999)}",
            'resolution': f'{randResolution}x{lowerResolution}',
            'randomL': f"{RandomString(6)}",
            'dpi': f"{random.choice(DPIs)}"
        }
        return '{Host} 155.0.0.37.107 {system} ({android_version}/{android_release}; {dpi}dpi; {resolution}; {manufacturer}; {model}; {cpu}; {randomL}; en_US)'.format(
            **DEVICE_SETTINTS)
    def generate_DeviceId(self , ID):
        volatile_ID = "12345"
        m = hashlib.md5()
        m.update(ID.encode('utf-8') + volatile_ID.encode('utf-8'))
        return 'android-' + m.hexdigest()[:16]  
class login:
    def __init__(self):
        self.sesstings = sessting()
        #self.username = None
        self.coo = None
        self.token = None
        self.mid = None
        self.DeviceID = None
        self.sessionid = None
        
    
    
    def headers_login(self):
        headers = {}
        headers['User-Agent'] = self.sesstings.generateUSER_AGENT()
        headers['Host'] = 'i.instagram.com'
        headers['content-type'] = 'application/x-www-form-urlencoded; charset=UTF-8'
        headers['accept-encoding'] = 'gzip, deflate'
        headers['x-fb-http-engine'] = 'Liger'
        headers['Connection'] = 'close'
        return headers
        
    def checkpoint(self,user):
        info = requests.get(f"https://i.instagram.com/api/v1{self.req.json()['challenge']['api_path']}", headers=self.headers_login(), cookies=self.coo)
        step_data = info.json()["step_data"]
        if "phone_number" in step_data:
            try:
                phone = info.json()["step_data"]["phone_number"]
                print(f'[0] phone_number : {phone}')
            except:
                pass
        elif "email" in step_data:
            try:
                email = info.json()["step_data"]["email"]
                print(f'[1] email : {email}')
            except:
                pass

        else:
            print("[-] unknown verification method [-]")
            input()
            exit()
        return self.send_choice(user)
    def send_choice(self,user):
        choice = input('choice : ')
        data = {}
        data['choice'] = str(choice)
        data['_uuid'] = uu
        data['_uid'] = uu
        data['_csrftoken'] = 'massing'
        challnge = self.req.json()['challenge']['api_path']
        self.send = requests.post(f"https://i.instagram.com/api/v1{challnge}",headers=self.headers_login(), data=data, cookies=self.coo)
        contact_point = self.send.json()["step_data"]["contact_point"]
        print(f'[+] code sent to : {contact_point} [+]')
        return self.get_code(user)
    def get_code(self,user):
        try:
            code = input("code : ")
            data = {}
            data['security_code'] = str(code),
            data['_uuid'] = uu,
            data['_uid'] = uu,
            data['_csrftoken'] = 'massing'
            path = self.req.json()['challenge']['api_path']
            send_code = requests.post(f"https://i.instagram.com/api/v1{path}", headers=self.headers_login(), data=data, cookies=self.coo)
            if "logged_in_user" in send_code.text:
                print(f'[+] Login Successfully as @{user} [+]')
                self.coo = self.req.cookies
                self.token = self.coo.get("csrftoken")
                self.mid = self.coo.get("mid")
                self.sessionid = self.coo.get("sessionid")
                return self.Account_recovery()
            else:
                regx_error = re.search(r'"message":"(.*?)",', send_code).group(1)
                print(regx_error)
                ask = input("[-] Code is Not Work Do You Want Try Agin [Y/N] : [-]")
                if ask.lower() == "y":
                    sleep(1)
                    return self.get_code()
                else:
                    exit()
        except:
            print("[+] accepted Done [+]")
            return self.Login()

        
        
    def Login(self,user):
        #self.username = input(f'[?] UserName? : ')
        print(f"[+] UserName : {user} ")
        self.DeviceID = self.sesstings.generate_DeviceId(user)
        self.passwordd = input(f'[?] Password? : ')
        data = {}
        data['guid'] = uu
        data['enc_password'] = f"#PWD_INSTAGRAM:0:{timestamp}:{self.passwordd}"
        data['username'] = user
        data['device_id'] = self.DeviceID
        data['login_attempt_count'] = '0'
        self.req = requests.post("https://i.instagram.com/api/v1/accounts/login/", headers=self.headers_login(), data=data)
        if "logged_in_user" in self.req.text:
            print(f'[+] Login Successfully as @{user} [+]')
            self.coo = self.req.cookies
        elif 'checkpoint_challenge_required' in self.req.text:
            self.coo = self.req.cookies
            self.token = self.coo.get("csrftoken")
            self.mid = self.coo.get("mid")
            self.sessionid = self.coo.get("sessionid")
            print("[+] SCURE FOUND [+] ")
            return self.checkpoint()
        else:
            try:
                regx_error = re.search(r'"message":"(.*?)",', self.req.text).group(1)
                print(regx_error)
            except:
                print(self.req.text)
            ask = input("[-] Something has gone wrong Do You Want Try Agin [Y/N] : [-]")
            if ask.lower() == "y":
                sleep(1)
                os.system("cls")
                return self.Login()
            else:
                input()
                exit()
class tickt_realise:
    def __init__(self):
        self.sessting = sessting()
        self.login = login()
        self.coo = None
        self.token = None
        self.mid = None
        self.DeviceID = None
        self.sessionid = None
        self.email = None
        self.phone = None
        self.req1 = None
        self.confirm_mode_email = None
        self.username = None
        self.confirm_mode_phone = None
    
    def drives(self):
        print("\t\t        Script Login in my github @Rayan1198 ")
        self.ask = int(input("[1] => Normal Login |  [2]^ => Login with Script in phone : "))
        if self.ask == 1:
            if self.username == None:
                self.username = input("UserName? : ")
            self.login.Login(self.username)
            
        else:
            if self.username == None:
                self.username = input("UserName? : ")
            #self.username = input("[?] UserName? : ")
            print(f"[+] username : {self.username}")
            self.DeviceID = self.sessting.generate_DeviceId(self.username)
        return self.Account_recovery()
            
    def headers(self):
        self.head = {}
        self.head["Host"] = "i.instagram.com"
        self.head["User-Agent"] = 'Instagram 166.0.0.32.120 Android (21/5.0.2; 240dpi; 540x960; samsung; SM-G530H; fortuna3g; qcom; ar_AE; 154400379)'
        self.head["Accept-Language"] = "en-US"
        self.head["Content-Type"] = "application/x-www-form-urlencoded; charset=UTF-8"
        self.head["Connection"] = "keep-alive"
        self.head['X-Ig-App-Locale'] = 'en_US'
        self.head['X-Ig-Device-Locale'] = "en_US"
        self.head["X-Pigeon-Rawclienttime"] = "1619296670.654"
        self.head["X-Ig-Bandwidth-Speed-Kbps"] = "-1.000"
        self.head["X-Ig-Bandwidth-Totalbytes-B"] = "0"
        self.head["X-Ig-Bandwidth-Totaltime-Ms"] = "0"
        self.head["X-Ig-App-Startup-Country"] = "unknown"
        self.head["X-Bloks-Version-Id"] = "befa8522d3a650f9592e33e4540d527c5b93babbdd6233a1bd40e955c9567f30"
        self.head["X-Ig-Www-Claim"] = "0"
        self.head["X-Bloks-Is-Layout-Rtl"] = "false"
        self.head["X-Bloks-Is-Panorama-Enabled"] = "true"
        self.head["X-Mid"] = "YMXJVQABAAGa6Frp6LAbn3r6iCWR"
        return self.head


    def Account_recovery(self):
        data = {}
        data["source"] = "login_help"
        data["_csrftoken"] = ""
        data["guid"] = uu
        data["device_id"] = self.DeviceID
        data["query"] = self.username
        sleep(1)
        Accountt = requests.post("https://i.instagram.com/api/v1/accounts/assisted_account_recovery/", data=data,headers=self.headers())
        Account = Accountt.text
        b = Accountt.json()
        if "show_recovery_challenge" in Account:
            self.path = re.search(r'"uri":"(.*?)",', Accountt.text).group(1)
            self.jsondata = b["challenge_context"]
            #print(self.jsondata)
            return self.print_info()
        else:
            print("[-] Error for open tickt , login or Accept Scure [-] ")
            input()
    
    def print_info(self):
        self.req = requests.get(f'https://i.instagram.com/api/v1{self.path}', headers=self.headers())
        try:
            pp = self.req.json()["step_data"]["options"][0]
            self.contact_point = pp["contact_point"]
            self.cho = pp["choice"]
            print(f'[{self.cho}] {self.contact_point}')
        except:
            pass
        try:
            pp = self.req.json()["step_data"]["options"][1]
            self.contact_point = pp["contact_point"]
            self.cho = pp["choice"]
            print(f'[{self.cho}] {self.contact_point}')
        except:
            pass        
        try:
            pp = self.req.json()["step_data"]["options"][2]
            self.contact_point = pp["contact_point"]
            self.cho = pp["choice"]
            print(f'[{self.cho}] {self.contact_point}')
        except:
            pass
        return self.choice()
    def choice(self):
        choice = input("[?] Choice : ")
        data = {}
        data["choice"] = choice
        data["_csrftoken"] = ""
        data["is_bloks_web"] = 'False'
        data["bk_client_context"] = '{"bloks_version":"e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931","styles_id":"instagram"}'
        data["nest_data_manifest"] = 'true'
        data["challenge_context"] = f"{self.jsondata}"
        data["bloks_versioning_id"] = 'e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931'
        sleep(1.5)
        req = requests.post("https://instagram.com/api/v1/bloks/apps/com.instagram.challenge.navigation.take_challenge/",data=data,headers=self.headers()).text
        if req.__contains__("It may take up to a minute for you to receive this code"):
            self.req1 = requests.get(f'https://i.instagram.com/api/v1{self.path}', headers=self.headers())
            #print(self.req1.json())
            print(f"[+] Code Sent To {self.req1.json()['step_data']['contact_point']} [+] ")
            return self.put_code()
        else:
            print("[-] Error [-]")
            input()
            exit()
    def put_code(self):
        self.code = input("[?] Code : ")
        data = {}
        data["security_code"] = self.code
        data["_csrftoken"] = ""
        data["is_bloks_web"] = "False"
        data["bk_client_context"] = '{"bloks_version":"e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931","styles_id":"instagram"}'
        data["nest_data_manifest"] = "true"
        data["challenge_context"] = f"{self.jsondata}"
        data["bloks_versioning_id"] = 'e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931'
        request_code = requests.post("https://instagram.com/api/v1/bloks/apps/com.instagram.challenge.navigation.take_challenge/", data=data,headers=self.headers()).text
        if request_code.__contains__("user_id"):
            print("[+] Code Is True [+] ")
            return self.informations()
        elif request_code.__contains__("Please check the code we sent you and try again"):
            print(" [-] Please check the code we sent you and try again. [-] ")
            ask = input("[?] Do You Want try Agin [Y/N] : ")
            if ask.lower() == "y":
                sleep(1)
                return self.put_code()
            else:
                input()
                exit()
        else:
            print(f"[-] Error send_code [-]")
            input()
            exit()
    def informations(self):
        info = requests.get(f'https://i.instagram.com/api/v1{self.path}', headers=self.headers())
        try:
            self.email = info.json()["step_data"]["contact_point"]
        except:
            print("Nothing Info")
            input()
            exit()
        try:
            self.confirm_mode_email = input(f"[?] Confirm Email -> {self.email} [Y/N] : ")
        except:
            self.confirm_mode_email = input(f"[?] Confirm New Email [Y/N] : ")
        return self.confirm()
    
    
    def confirmed(self, contact,types):
        data = {}
        data["_csrftoken"] = ""
        data["is_bloks_web"] = 'False'
        data["skip"] = '0'
        data["type"] = types
        data["contact_point"] = f'{contact}'
        data["bk_client_context"] = '{"bloks_version":"e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931","styles_id":"instagram"}',
        data["nest_data_manifest"] = 'true',
        data["challenge_context"] = f"{self.jsondata}",
        data["bloks_versioning_id"] = 'e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931'
        sleep(1.5)
        Response = requests.post("https://instagram.com/api/v1/bloks/apps/com.instagram.challenge.navigation.take_challenge/",data=data, headers=self.headers()).text
        if Response.__contains__("Add New Phone Number") or Response.__contains__("Confirm Your Phone Number") or Response.__contains__("Confirm Your Phone Number") or Response.__contains__("pwd_change_after_phone_after_email"):
            print(f"[+] {contact} Confirmed [+] ")
        elif Response.__contains__("Another account is using"):
            print("[-] Error confirmed Because Another account is using email or phone_number [-]")
            ask = input("[?] Try agin? [Y/n] : ")
            if ask.lower() == "y":
                return self.choice()
            else:
                input("[\] press Enter To close tickt ");exit(0)
        elif Response.__contains__("It may take up to a minute for you to receive this code"):
            return self.put_code()
        else:
            print("[-] Error confirmed [-]")
            input()
            exit(0)

    def skip(self, contact):
        data = {}
        data["_csrftoken"] = ""
        data["is_bloks_web"] = 'False'
        data["skip"] = '1'
        data["contact_point"] = ''
        data["bk_client_context"] = '{"bloks_version":"e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931","styles_id":"instagram"}'
        data["nest_data_manifest"] = 'true'
        data["challenge_context"] = f"{self.jsondata}",
        data["bloks_versioning_id"] = 'e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931'
        sleep(1.5)
        Response = requests.post("https://instagram.com/api/v1/bloks/apps/com.instagram.challenge.navigation.take_challenge/", data=data,headers=self.headers() ).text
        if Response.__contains__("Add New Phone Number") or Response.__contains__("Confirm Your Phone Number") or Response.__contains__("Change Your Password") or Response.__contains__("pwd_change_after_phone_after_email"):
            print(f"[+] {contact} [+]")
        else:
            print(f"[-] Something has gone wrong [-]")
            input()
            exit()
            
    def confirm(self):
        if self.confirm_mode_email.lower() == 'y':
            self.type = "email"
            self.confirmed(self.email,self.type)
            self.skip("phone_number Skipped")
            self.change_password()
        elif self.confirm_mode_email.lower() == 'n':
            self.type = "phone_number"
            self.skip("email Skipped")
            infos = requests.get(f'https://i.instagram.com/api/v1{self.path}', headers=self.headers())
            self.phone = infos.json()["step_data"]["contact_point"]
            self.confirmed(self.phone,self.type)
            self.change_password()
        else:
            print(f"[-] nothing choice [-]")
            input()
            exit()
            
    def change_password_email(self):
        ask = input("[?] Do You Want Random password [Y/N] : ")
        if ask.lower() == "y":
            self.new_password = ''.join(random.choice("qwertyuiopasdfghjklzxcvbnm1234567890!@#$%^&*")for i in range(15))
            print(f"[+] Password is -> {self.new_password} [+]")
        else:
            self.new_password = input("[*] New Password : ")
        data_password = {}
        data_password["_csrftoken"] = ""
        data_password["is_bloks_web"] = 'False'
        data_password["bk_client_context"] = '{"bloks_version":"e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931","styles_id":"instagram"}'
        data_password["nest_data_manifest"] =  'true'
        data_password["challenge_context"] = f"{self.jsondata}"
        data_password["bloks_versioning_id"] = 'e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931'
        data_password["enc_new_password1"] = f"#PWD_INSTAGRAM:4:{timestamp}:{self.new_password}"
        data_password["enc_new_password2"] = f"#PWD_INSTAGRAM:4:{timestamp}:{self.new_password}"
        sleep(1)
        Respone = requests.post("https://instagram.com/api/v1/bloks/apps/com.instagram.challenge.navigation.take_challenge/",data=data_password,headers=self.headers()).text
        if Respone.__contains__(self.username):
            print("[+] Password Changed [+]")
            return self.changeUsername()
        elif Respone.__contains__("Create a password at least 6 characters long"):
            print("[-] Create a password at least 6 characters long. [-]")
            input()
            exit()
        else:
            print(f"[-] Error_Change_password [-]")
            input()
            exit()
    def change_password(self):
        ask = input("[?] Do You Want Random password [Y/N] : ")
        if ask.lower() == "y":
            self.new_password = ''.join(random.choice("qwertyuiopasdfghjklzxcvbnm1234567890!@#$%^&*")for i in range(15))
        else:
            self.new_password = input("[*] New Password : ")
        data_password = {}
        data_password["_csrftoken"] = ""
        data_password["is_bloks_web"] = 'False'
        data_password["bk_client_context"] = '{"bloks_version":"e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931","styles_id":"instagram"}'
        data_password["nest_data_manifest"] =  'true'
        data_password["challenge_context"] = f"{self.jsondata}"
        data_password["bloks_versioning_id"] = 'e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931'
        data_password["enc_new_password1"] = f"#PWD_INSTAGRAM:0:1624085885:{self.new_password}"
        data_password["enc_new_password2"] = f"#PWD_INSTAGRAM:0:1624085885:{self.new_password}"
        sleep(1)
        Respone = requests.post("https://instagram.com/api/v1/bloks/apps/com.instagram.challenge.navigation.take_challenge/",data=data_password,headers=self.headers()).text
        if Respone.__contains__(self.username):
            print("[+] Password Changed [+]")
            
        elif Respone.__contains__("Create a password at least 6 characters long"):
            print("[-] Create a password at least 6 characters long. [-]")
            input()
            exit()
        else:
            print(f"[-] Error_Change_password [-]")
            input()
            exit()
        
    def changeUsername(self):
        new_username = self.username + ".done_changeusername"
        writesomething("+",f"New Username is -> {new_username} [+]\n")
        data = {}
        data["external_url"] = ''
        data["_csrftoken"] = f""
        data['username'] = new_username
        data["is_bloks_web"] = 'False'
        data["first_name"] = ''
        data["biography"] = 'FALCON DIGITAL ORG\n IG : [@31421 - @m1c1]\nLogin Helper'
        data["bk_client_context"] = '{"bloks_version":"e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931","styles_id":"instagram"}'
        data["nest_data_manifest"] = 'true'
        data["challenge_context"] = f"{self.jsondata}"
        data["bloks_versioning_id"] = 'e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931'
        #ctypes.windll.user32.MessageBoxW(0, "TICKT REALISE IS READY ?  ", f"FALCON DIGITAL 🦅", 0x1000)
        change_username = requests.post("https://instagram.com/api/v1/bloks/apps/com.instagram.challenge.navigation.take_challenge/",data=data, headers=self.headers()).text
        if change_username.__contains__(new_username) or change_username.__contains__('"status":"ok"'):
            print(f"\n[+] Username Changed To -> {new_username} [+] ")
            try:
                with open(f"@{new_username}.txt","a") as Save:
                    Save.write(f"old username : @{self.username}\nnew Username : @{new_username}\nnew_password : {self.new_password}")
            except:
                pass
        else:
            print(f"\n[-] Something has gone wrong [-] ")
            with open(f"@{new_username}.txt","a") as Save:
                Save.write(f"old username : @{self.username}\nnew Username : @{new_username}\nnew_password : {self.new_password}")
class Fast_thread:
    def __init__(self, fuc):
        self.TARGET = fuc
        self.threads_list = []

    def Generate_threds(self, Attack):
        for i in range(Attack):
            threads = threading.Thread(target=self.TARGET)
            threads.setDaemon(True)
            self.threads_list.append(threads)
        return self.threads_list

    def started(self):
        for threads_Attack in self.threads_list:
            threads_Attack.start()

    def joined(self):
        for thread_join in self.threads_list:
            thread_join.join()
class Swap:
    def __init__(self):
        self.attempt = 0
        self.Rate = 0
        self.user = None
        self.email = None
        self.run = True
        self.tickt = tickt_realise()
        writesomething("+",f"session : ")
        self.session = input()
        self.get_info()
        self.look = threading.Lock()
        writesomething("?",f"Do You Want check session if Blocked? [Y/n] : ")
        self.check = input()
        if self.check.lower() == "y":
            self.check_block()
        writesomething("+",f"Target : ")
        self.target = input();print("\n")
        self.tickt.username = self.target
        clearConsle()
        print(f"\t{Banner}")
        print("--"*40)
        self.tickt.drives()
        writesomething("+", f"Threads : ")
        self.threads = int(input())
        threading.Thread(target=self.PRINT).start()
        ctypes.windll.user32.MessageBoxW(0, f"TICKT REALISE + Swap IS READY ?", "FALCON DIGITAL 🦅", 0x1000)
        th = Fast_thread(self.swap)
        th.Generate_threds(self.threads)
        th.started()
        th.joined()
    def send(self):
        url = "https://discord.com/api/webhooks/881360737606443098/XJRGDx7U8X3oIe5n71t_m9HXoAOgP3GUEUOm4gBdhG_0DKicxGa6umCtdWLtto3OnvAK" #webhook url, from here: https://i.imgur.com/f9XnAew.png

        #for all params, see https://discordapp.com/developers/docs/resources/webhook#execute-webhook
        data = {}
        #leave this out if you dont want an embed
        #for all params, see https://discordapp.com/developers/docs/resources/channel#embed-object
        data["embeds"] = [
            {
                "description" : f"swapped by {by} ",
                "title" : f"Auto Swap Daylight on Tickt Release\n\n@{self.user} Swapped To @{self.target}",
                
            }
        ]
        result = requests.post(url, json=data)
        try:
            result.raise_for_status()
        except requests.exceptions.HTTPError as err:
            print(err)
        else:
            pass
        # webhook = DiscordWebhook(url='https://discord.com/api/webhooks/881360737606443098/XJRGDx7U8X3oIe5n71t_m9HXoAOgP3GUEUOm4gBdhG_0DKicxGa6umCtdWLtto3OnvAK')
        # embed = DiscordEmbed(title=f'Swapped @{self.target}\n\n`Swaped By Swapper {by}`', color=242424)
        # embed.set_author(name="Daylight")
        # embed.set_image(url=f"{random.choice(imge)}")
        # embed.set_footer(text='Made By Rayan@m1c1')
        # embed.set_timestamp()
        # webhook.add_embed(embed)
        # webhook.execute()
    def PRINT(self):
        while True:
                os.system(f"title Attempt : {self.attempt:,} / Rate : {self.Rate:,}")
    def get_info(self):
        try:
            get = requests.get("https://i.instagram.com/api/v1/accounts/current_user/?edit=true",headers={"User-Agent": "Instagram 166.0.0.32.120 Android (21/5.0.2; 240dpi; 540x960; samsung; SM-G530H; fortuna3g; qcom; ar_AE; 154400379)"},cookies={"sessionid": self.session}).text
            #print(get)
            self.user = re.search(r'"username":"(.*?)",',get).group(1)
            self.email = re.search(r'"email":"(.*?)",',get).group(1)
            if self.user or self.email in get:
                writesomething("+",f"Loged in to @{self.user}")
                input()
                clearConsle()
                print(f"\t{Banner}")
                print("--"*40)
        except:
            writesomething("-",f"Bad session")
            input()
            exit(0)
    def check_block(self):
        Response = edit_profile(number="", target=self.user + ".checkblock", email=self.email,sessionid=self.session)
        if Response.__contains__('"status":"ok"'):
            writesomething("+",f"@{self.user} The account is working Click Enter to continue\n");input()
            clearConsle()
            print(f"\t{Banner}")
            print("--"*40)
        else:
            writesomething("-",f"@{self.user} The account is blocked for spamming too many requests\n")
            writesomething("?","Do You Want Continue Swap [Y/N] :  ")
            qus = input()
            if qus.lower() == "y":
                return True
            else:
                writesomething("-", text="Click Enter To Close")
                input()
                exit()
    def Api(self):
        edit = edit_profile(number="",target=self.target,email=self.email,sessionid=self.session)
        set_user = set_username_without_proxy(target=self.target,sessionid=self.session)
        apis = [edit,set_user]
        return random.choice(apis)

    def swap(self):
        while self.run:
            Resp =  self.Api()
            if Resp.__contains__('"status":"ok"'):
                with self.look:
                    self.run = False
                    writesomething("$",f"Successflly Swapped @{self.target}")
                    self.send()
                    ctypes.windll.user32.MessageBoxW(0, f"Successflly Swapped : @{self.target} ", "Daylight Swap", 0x1000)
                    os._exit(0)
            elif Resp.__contains__("isn't"):
                self.attempt +=1
                if self.attempt >=5:
                    with self.look:
                        self.tickt.changeUsername()
            else:
                self.Rate +=1


if __name__ == '__main__':
    active = requests.get("https://api.ipify.org/?format=json").json()
    ip = active["ip"]
    scan = requests.get("https://pastebin.com/raw/uJsmaEwq").text
    if ip in scan:
        print("[+] Welcme To Login Helper [+] \n")
    else:
        print(f"[-] This ip {ip} is not active [-] ")
        input()
        exit(0)
    writesomething("?",f"1 => tickt_realise | 2 => Auto Swap with tickt_realise\n[/] choice : ");Mode = input()
    if Mode.__contains__("1"):
        tickt = tickt_realise()
        tickt.drives()
    else:
        scan2 = requests.get("https://pastebin.com/raw/miBm2ymP").text
        try:
            by = re.search(rf'{ip} "(.*?)"',scan2).group(1)
        except:
            pass
        if ip in scan2:
            Swap()
        else:
            print(f"[-] This ip {ip} is not active For This choice [-]")
            input()
            exit(0)
    
    

